- Javaの特徴
- アプリケーションの仕様変更を行いやすいこと
- セキュリティが強固であること
- 長期間にわたる保守・運用がしやすいこと
- 実行速度が速いこと
- このJavaが大規模案件に向いているという認識は非常に重要
- オブジェクトの使い方は理解していないとJavaアプリケーションのコードを書くことはできないほど重要
- RubyとJavaにおける変数の扱い方の違い
  Ruby: 動的型付け言語, Java: 静的型付け言語
- これらの違いを理解する上でまずは、データ型を理解する
- データ型とは、変数に格納するデータの種類のこと。
- データ型とは「文字」、「数値」などの種類をより細かく定めたもので、Javaの基本データ型は8つの種類がある。
- データ型はコンピュータのリソースを効率よく使うための仕組み。
- 基本データ型の種類一覧
- データ型	bit数	値　　（bit数とはメモリ1箱分のイメージ）
- boolean	1bit	true あるいは false
- char	16bit	文字
- byte	8bit	整数（扱える範囲は -128～127）
- short	16bit	整数（扱える範囲は-32,768～32,767）
- int	32bit	整数（扱える範囲は-2,147,483,648～2,147,483,647）
- long	64bit	整数（扱える範囲は-9223372036854775808～9223372036854775807）
- float	32bit	小数（精度低）
- double 64bit	小数（精度高）
- Javaで扱う言語は「静的型付け言語」であるため変数を使用し始める際は「型の宣言」が必要となる（Rubyは動的型付け言語であるため型の宣言は不要であった）
- Javaでは命名の終わりに（行末）にセミコロン(;)が必要
- class Main {
  public static void main(String[] args) {
    //ここに処理を記述する
  }
}
- 上記のコードはJavaでは必ず書かなければならないコードである。
- System.out.printlnは()の中を出力するメソッドで、Rubyでいうputsに相当する。
- 以下のコードの意味を確認してみる
- class Main {
  public static void main(String[] args) {
    int radius;
    radius = 5;
    System.out.println(radius * radius * 3.14);
  }
}
- 1:int radius;によって、int型の変数radiusを宣言する
- 2:radius = 5;によって、変数radiusに整数の5を代入する
- 3:printlnを実行して、計算結果を出力する。
- このように、Javaで変数を使用する際には、まず型の宣言が必要。ただし、Javaには「型推論」と呼ばれる仕組みがあり、宣言に関するコードを省略することができる。
- 型推論の使用例：var radius = 5;
    System.out.println(radius * radius * 3.14);
- このようにvarを使用すると、代入する値（今回の例では5）からデータ型を推論してくれるため、int型であるという宣言が不要になる。
- つまり、varを使用して、変数の宣言と同時に初期値を代入する場合は、省略することも可能。
- 代数演算子、比較演算子　共に使い方はRubyと同じ。
- 配列に関してはRubyの配列とは性質が異なる。
- Javaの配列は、格納する要素の数を最初に決める必要があり、かつ後で要素数を変更することができない。  
- 配列に要素を追加する場合はArrayListというリストの一種を使用する。ArrayListは要素の数を変更できる配列のようなもので、ウェブアプリケーション開発ではよく使用される。
- 配列の使い方：
① 配列の宣言を行う
② 配列の要素を作成し、配列に代入する
③ 配列の要素に値を代入する
- 例：
  class Main {
  public static void main(String[] args) {
    int[] scores;
    scores = new int[3];

    scores[0] = 1;
    scores[1] = 5;
    scores[2] = 10;

    System.out.println(scores[0]);
    System.out.println(scores[1]);
    System.out.println(scores[2]);
  }
}
