- Javaの特徴
- アプリケーションの仕様変更を行いやすいこと
- セキュリティが強固であること
- 長期間にわたる保守・運用がしやすいこと
- 実行速度が速いこと
- このJavaが大規模案件に向いているという認識は非常に重要
- オブジェクトの使い方は理解していないとJavaアプリケーションのコードを書くことはできないほど重要
- RubyとJavaにおける変数の扱い方の違い
  Ruby: 動的型付け言語, Java: 静的型付け言語
- これらの違いを理解する上でまずは、データ型を理解する
- データ型とは、変数に格納するデータの種類のこと。
- データ型とは「文字」、「数値」などの種類をより細かく定めたもので、Javaの基本データ型は8つの種類がある。
- データ型はコンピュータのリソースを効率よく使うための仕組み。
- 基本データ型の種類一覧
- データ型	bit数	値　　（bit数とはメモリ1箱分のイメージ）
- boolean	1bit	true あるいは false
- char	16bit	文字
- byte	8bit	整数（扱える範囲は -128～127）
- short	16bit	整数（扱える範囲は-32,768～32,767）
- int	32bit	整数（扱える範囲は-2,147,483,648～2,147,483,647）
- long	64bit	整数（扱える範囲は-9223372036854775808～9223372036854775807）
- float	32bit	小数（精度低）
- double 64bit	小数（精度高）
- Javaで扱う言語は「静的型付け言語」であるため変数を使用し始める際は「型の宣言」が必要となる（Rubyは動的型付け言語であるため型の宣言は不要であった）
- Javaでは命名の終わりに（行末）にセミコロン(;)が必要
- class Main {
  public static void main(String[] args) {
    //ここに処理を記述する
  }
}
- 上記のコードはJavaでは必ず書かなければならないコードである。
- System.out.printlnは()の中を出力するメソッドで、Rubyでいうputsに相当する。
- 以下のコードの意味を確認してみる
- class Main {
  public static void main(String[] args) {
    int radius;
    radius = 5;
    System.out.println(radius * radius * 3.14);
  }
}
- 1:int radius;によって、int型の変数radiusを宣言する

