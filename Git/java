- Javaの特徴
- アプリケーションの仕様変更を行いやすいこと
- セキュリティが強固であること
- 長期間にわたる保守・運用がしやすいこと
- 実行速度が速いこと
- このJavaが大規模案件に向いているという認識は非常に重要
- オブジェクトの使い方は理解していないとJavaアプリケーションのコードを書くことはできないほど重要
- RubyとJavaにおける変数の扱い方の違い
  Ruby: 動的型付け言語, Java: 静的型付け言語
- これらの違いを理解する上でまずは、データ型を理解する
- データ型とは、変数に格納するデータの種類のこと。
- データ型とは「文字」、「数値」などの種類をより細かく定めたもので、Javaの基本データ型は8つの種類がある。
- データ型はコンピュータのリソースを効率よく使うための仕組み。
- 基本データ型の種類一覧
- データ型	bit数	値　　（bit数とはメモリ1箱分のイメージ）
- boolean	1bit	true あるいは false
- char	16bit	文字
- byte	8bit	整数（扱える範囲は -128～127）
- short	16bit	整数（扱える範囲は-32,768～32,767）
- int	32bit	整数（扱える範囲は-2,147,483,648～2,147,483,647）
- long	64bit	整数（扱える範囲は-9223372036854775808～9223372036854775807）
- float	32bit	小数（精度低）
- double 64bit	小数（精度高）
- Javaで扱う言語は「静的型付け言語」であるため変数を使用し始める際は「型の宣言」が必要となる（Rubyは動的型付け言語であるため型の宣言は不要であった）
- Javaでは命名の終わりに（行末）にセミコロン(;)が必要
- class Main {
  public static void main(String[] args) {
    //ここに処理を記述する
  }
}
- 上記のコードはJavaでは必ず書かなければならないコードである。
- System.out.printlnは()の中を出力するメソッドで、Rubyでいうputsに相当する。
- 以下のコードの意味を確認してみる
- class Main {
  public static void main(String[] args) {
    int radius;
    radius = 5;
    System.out.println(radius * radius * 3.14);
  }
}
- 1:int radius;によって、int型の変数radiusを宣言する
- 2:radius = 5;によって、変数radiusに整数の5を代入する
- 3:printlnを実行して、計算結果を出力する。
- このように、Javaで変数を使用する際には、まず型の宣言が必要。ただし、Javaには「型推論」と呼ばれる仕組みがあり、宣言に関するコードを省略することができる。
- 型推論の使用例：var radius = 5;
    System.out.println(radius * radius * 3.14);
- このようにvarを使用すると、代入する値（今回の例では5）からデータ型を推論してくれるため、int型であるという宣言が不要になる。
- つまり、varを使用して、変数の宣言と同時に初期値を代入する場合は、省略することも可能。
- 代数演算子、比較演算子　共に使い方はRubyと同じ。
- 配列に関してはRubyの配列とは性質が異なる。
- Javaの配列は、格納する要素の数を最初に決める必要があり、かつ後で要素数を変更することができない。  
- 配列に要素を追加する場合はArrayListというリストの一種を使用する。ArrayListは要素の数を変更できる配列のようなもので、ウェブアプリケーション開発ではよく使用される。
- 配列の使い方：
① 配列の宣言を行う
② 配列の要素を作成し、配列に代入する
③ 配列の要素に値を代入する
- 例：
  class Main {
  public static void main(String[] args) {
    int[] scores;
    scores = new int[3];

    scores[0] = 1;
    scores[1] = 5;
    scores[2] = 10;

    System.out.println(scores[0]);
    System.out.println(scores[1]);
    System.out.println(scores[2]);
  }
}
- 実行すると以下のように表示される
  1
  5
  10
- ①上記の記述では、まず配列の宣言を行う。int[] scores;
- int型、つまり整数を格納する配列であることが宣言された。
- ②scores = new int[3];　このコードで、int型の要素を３つ作成している。そして、配列scoresに代入している。
- ここまでのコードによって、配列の宣言と、配列に３つの要素を代入する受け皿を用意することができた。
- 最後に行うのが値の代入。
- ③scores[0] = 1;で一番目の配列に1を代入している。
- また、一番目の配列の要素を取り出すときは、scores[0]と記述することでできる。
- 上記の記述で、配列の宣言と要素の代入を2行の記述によって行った。
  int[] scores;
  scores = new int[3];
- この記述を以下のように、1行にまとめて定義することができる。
- int[] scores = new int[3];
- また、配列の宣言から値の代入まで全て同時に行う方法は以下のように記述する。
- int[] scores = {1, 5, 10};
- この記述方法が最も簡潔だが、宣言時に代入する値が確定していない場合は使用できない。
- リストについて...
- リストは、Rubyの配列と似たデータ管理の仕組み。
以下の特徴がある。
要素を順序づけて管理する
要素を事後的に追加したり削除できる
また、Javaのリストには、以下の2種類がある。
ArrayList
LinkedList
　- 使用頻度の高いArrayListについて
- ArraListは「可変長配列」を使用するための仕組み。可変長配列とは、文字通り長さ（要素数）を変更できる配列のこと。
Rubyの配列は可変長なので、Javaの配列よりもArrayListの方が性質や使い方が近いものとなっている。
- ArrayListの使い方は以下のように使う。
  import java.util.ArrayList;

class Main {
  public static void main(String[] args) {
    ArrayList<Integer> scores = new ArrayList<Integer>();

    scores.add(1);
    scores.add(5);
    scores.add(10);
    scores.add(15);

    System.out.println(scores.get(0));
    System.out.println(scores.get(1));
    System.out.println(scores.get(2));
    System.out.println(scores.get(3));
  }
}
- ArrayListを使用する際は、事前にライブラリのインポートが必要。
- 上記のコードを記述する際は、1行目にimport文があることに注意する。
- 上記のコードでは以下の4つを行ってる。
① ライブラリをインポートする　　ArrayListを使用する際は、ライブラリのインポートが必要。インポートするには、ファイルの冒頭に以下の記述を行う。
  import java.util.ArrayList;
② ArrayListの宣言を行う
  ArrayList<Integer> scores = new ArrayList<Integer>();
ここで行っているのは、以下の２つの動作です。
・ 整数（Integer）を格納するArrayListを「score」という名称で宣言
・　ArrayListの要素を作成
③ ArrayListに値を代入する　　ArrayListに要素を追加するためにはaddメソッドを使用する。
記述は、add(要素として追加する値)のように行う。
  scores.add(1);
④ ArrayListから要素を取り出す　　要素を取り出す際は、getメソッドを使用する。
記述は、get(取得したい要素のインデックス） のように行う。配列から要素を取り出す際と同様に、「1番目」の要素を取り出したい時は、インデックスとして「0」を指定する。
　　scores.get(0)
- if文について
class Main {
  public static void main(String[] args) {
    int value = 3;

    if (value > 0){
      System.out.println("値は正です"); 
    }
  }
}   
- 実行すれば、値は正です」と出力される。 if文は以下のように使う。
if ( 条件式 ) {
  条件式を満たす時に実行する処理
}
- Rubyでの記述方法と異なるのは以下の点。 
・条件式を（）で囲む必要があること
・行いたい処理を{}で囲む必要があること
- また、さらに細かい条件分岐をする際は、Rubyと同じようにelseやelsifを用いる。
class Main {
  public static void main(String[] args) {
    int value = 3;

    if (value > 0){
      System.out.println("値は正です"); 
    }else if (value < 0){
      System.out.println("値は負です"); 
    }else {
      System.out.println("値は0です"); 
    }
  }
}
- 基本的な使い方はRubyと同じ。
  if (条件A) { 
  // 処理A
} else if () {
  // 処理B
} else {
  // 処理C
}
- Rubyの「elsif」は、Javaでは「else if」と記述することに注意する。
- 繰り返し処理として、Javaでは拡張for文を用いる
- 拡張for文の使用例：　
class Main {
  public static void main(String[] args) {
    int[] scores = {1, 5, 10};

    for(int score : scores) {
      System.out.println(score);  
    }
  }
}  
- コードを実行すると、scoresという配列の要素として、「1, 5, 10」を代入しているが、拡張for分によって取り出して出力できていることが分かる。
- ArrayListからも要素を取り出す場合も使い方は一緒で以下のように使用する。
- import java.util.ArrayList;

class Main {
  public static void main(String[] args) {
    ArrayList<Integer> scores = new ArrayList<Integer>();

    scores.add(1);
    scores.add(5);
    scores.add(10);
    scores.add(15);

    for(int score : scores) {
      System.out.println(score);  
    }
  }
}
- 実行すると出力結果は以下のようになる。
  1
  5
  10
  15
- 拡張for文の使い方の詳細は以下である。
- for ( 要素を格納する変数宣言  :  配列あるいはArrayListの変数名) {
  取り出した要素を使用して行う処理
}
- この記述を行うと、以下のように動作する。
① 配列、あるいはArrayListから要素を1つ取り出す
② 取り出した要素を変数に代入する
③ {}内の処理を行う
④ 配列、あるいはArrayListの要素数分だけ処理を繰り返す
